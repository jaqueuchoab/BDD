using Xunit;
using TestStack.BDDfy;
using DoceFidelidade.Models;
using DoceFidelidade.Services;
namespace DoceFidelidade.Tests;

[Story(
  Title = "Validate a loyalty",
  AsA = "As a Doce Encanto customer",
  IWant = "I want to validate a loyalty code generated by the administrator",
  SoThat = "To ensure that points are delivered to the customer."
)]

public class ValidateCode {
  // Atributos importantes para o teste, Model Administrator e Cliente, Service ClientService e AdministratorService
  Client _client;
  Administrator _administrator;
  AdministratorService _administratorService;
  ClientService _clientService;
  // Variáveis auxiliares para o teste
  // Variável code que recebe o código de fidelidade
  string code = "";
  // Variável que guarda os últimos pontos do cliente a fim de saber se houve a acumulação de pontos
  int clientLastPoints = 0;

  [Given("the client has registered on the app")]
  public void GivenClientRegistered() {
    // Instanciando um cliente de forma válida
    _client = new Client("Sarah", "sarah@gmail.com", "(88) 99654-3636");
    _clientService = new ClientService();
    _clientService.AddClient(_client);
  }

  [Given("the administrator has registered on the app")]
  public void GivenAdministratorRegistered() {
    // Instanciando um administrador de forma válida
    _administrator = new Administrator("Jaqueline", "jaque@gmail.com", "(88) 99654-4536", "12345678");
    _administratorService = new AdministratorService();
    _administratorService.AddAdmin(_administrator);
  }

  [When("the administrator generates a loyalty code for the client")]
  public void WhenAdministratorGeneratesCode() {
    // Gerando um código de fidelidade para o cliente
    code = _administratorService.AdmGenerateCode();
  }

  [When("the client validates the loyalty code")]
  public void WhenClientValidatesCode() {
    // Validando o código de fidelidade gerado
    _clientService.ValidateCode(code);
    _clientService.AddPointsToClient(_client);
  }

  [Then("the client should receive cumulative points for the loyalty code")]
  public void ThenClientReceivesPoints() {
    // Verificando se o cliente recebeu os pontos acumulados
    Assert.True(_client.Points > clientLastPoints, "The client should have received cumulative points.");
  }

  [Fact]
  public void ExecutingScenarioValidateCode()
  {
    this.BDDfy();
  }
}